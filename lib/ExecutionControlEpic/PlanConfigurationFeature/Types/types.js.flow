"use babel";
// @flow

import type { PackageInfos } from "../../../ProjectSystemEpic/PackageFeature/Types/types.js.flow";

export type ConfigSchemaPartBase = {
  label?: string,
  description?: string,
};

export type ObjectConfigSchema = {
  type: "object",
  default: Object,
  schemas: { [key: string]: ConfigSchemaPart },
};

export type ArrayConfigSchema = {
  type: "array",
  default: ConfigSchemaPart,
  items: ConfigSchemaPart,
};

export type StringConfigSchema = {
  type: "string",
  default: string,
  placeholder?: string,
};

export type BooleanConfigSchema = {
  type: "boolean",
  default: boolean,
};

export type NumberConfigSchema = {
  type: "number",
  default: number,
  placeholder?: string,
};

export type ConditionalConfigSchema = {
  type: "conditional",
  default: string,
  expression: EnumConfigSchema | StringConfigSchema,
  cases: { [key: string]: ?ConfigSchemaPart },
};

export type EnumConfigSchema = {
  type: "enum",
  default: DevToolPlanConfig,
  enum: Array<{ value: any, description: string }>,
};

export type FileConfigSchema = {
  type: "file",
  default: string,
  tester:
    | RegExp
    | string
    | ((file: string, directory: ?Directory) => boolean | false),
};

export type Directory = {
  name: string,
  files: Array<string | Directory>,
};

export type ConfigSchemaPart = ConfigSchemaPartBase &
  (
    | FileConfigSchema
    | ArrayConfigSchema
    | StringConfigSchema
    | BooleanConfigSchema
    | NumberConfigSchema
    | EnumConfigSchema
    | ObjectConfigSchema
    | ConditionalConfigSchema);

export type DevToolInfos = {
  id: string,
  name: string,
  iconUri: string,
};

export type DevToolPlanConfig = mixed;

export type SSHConfigSchema = {
  type: "object",
  schemas: {
    username: {
      type: "string",
      default: "",
      label: "username",
    },
    privateKeyPath: {
      type: "string",
      default: "",
      label: "key path",
    },
  },
};

export type SSHConfig = {
  username: string,
  privateKeyPath: string,
};

export type HostConfigSchema = {
  type: "object",
  schemas: {
    host: {
      type: "string",
      default: "",
      label: "host",
    },
    port: {
      type: "number",
      default: 22,
      label: "port",
    },
  },
};

export type HostConfig = {
  host: string,
  port: number,
  transport: SSHConfig,
};

export type Stager =
  | {
      type: "integrated",
    }
  | {
      type: "local",
    }
  | {
      type: "remote",
      host: HostConfig,
    };

export type DevToolPlanConfigSchema = ConfigSchemaPart & { tool: DevToolInfos };

export type PlanConfig = {
  tool: DevToolInfos,
  config: any,
  pinned?: boolean,
  name: string,
  stager: Stager,
  packageInfos: PackageInfos,
};
