// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PlanConfigList should display the values 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.div>
    <styled.span
      error={false}
    />
    <StateInjector
      __debug={false}
      watchPath={[Function]}
    >
      [Function]
    </StateInjector>
  </styled.div>,
  "nodes": Array [
    <styled.div>
      <styled.span
        error={false}
      />
      <StateInjector
        __debug={false}
        watchPath={[Function]}
      >
        [Function]
      </StateInjector>
    </styled.div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <PlanConfigList
        items={
          Object {
            "schemas": Object {
              "name": Object {
                "default": "",
                "placeholder": "name",
                "type": "string",
              },
              "value": Object {
                "default": "",
                "placeholder": "value",
                "type": "string",
              },
            },
            "type": "object",
          }
        }
        onChange={[Function]}
        values={
          Array [
            Object {
              "name": "NODE_PLAN",
              "value": "web",
            },
            Object {
              "name": "NODE_ENV",
              "value": "dev",
            },
          ]
        }
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "items": Object {
            "schemas": Object {
              "name": Object {
                "default": "",
                "placeholder": "name",
                "type": "string",
              },
              "value": Object {
                "default": "",
                "placeholder": "value",
                "type": "string",
              },
            },
            "type": "object",
          },
          "onChange": [Function],
          "values": Array [
            Object {
              "name": "NODE_PLAN",
              "value": "web",
            },
            Object {
              "name": "NODE_ENV",
              "value": "dev",
            },
          ],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.div>
          <styled.span
            error={false}
          />
          <StateInjector
            __debug={false}
            watchPath={[Function]}
          >
            [Function]
          </StateInjector>
        </styled.div>,
        "_debugID": 2,
        "_renderedOutput": <styled.div>
          <styled.span
            error={false}
          />
          <StateInjector
            __debug={false}
            watchPath={[Function]}
          >
            [Function]
          </StateInjector>
        </styled.div>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PlanConfigList
    items={
      Object {
        "schemas": Object {
          "name": Object {
            "default": "",
            "placeholder": "name",
            "type": "string",
          },
          "value": Object {
            "default": "",
            "placeholder": "value",
            "type": "string",
          },
        },
        "type": "object",
      }
    }
    onChange={[Function]}
    values={
      Array [
        Object {
          "name": "NODE_PLAN",
          "value": "web",
        },
        Object {
          "name": "NODE_ENV",
          "value": "dev",
        },
      ]
    }
  />,
}
`;
